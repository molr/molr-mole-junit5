buildscript {
    project.ext['CERN_VM'] = System.getProperty('CERN_TECHNET_VM') ?: System.getenv('CERN_TECHNET_VM') ?: System.getProperty('CERN_VM') ?: System.getenv('CERN_VM') ?: false
    project.ext['DEPLOYMENT'] = System.getProperty('deployment') ?: false
    project.ext['VCS_TAG'] = System.getProperty('TRAVIS_TAG') ?: System.getenv('TRAVIS_TAG') ?: System.getProperty('VCS_TAG')

    project.ext['BINTRAY.userName'] = System.getProperty('BINTRAY_USER') ?: System.getenv('BINTRAY_USER')
    project.ext['BINTRAY.apiToken'] = System.getProperty('BINTRAY_API_TOKEN') ?: System.getenv('BINTRAY_API_TOKEN')
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'eclipse'
apply plugin: 'idea'

sourceCompatibility = JavaVersion.VERSION_1_8

group = "io.molr"

repositories {
    repositories {
        if (project['CERN_VM']) {
            maven { url 'http://artifactory.cern.ch/ds-jcenter' }
            maven { url 'http://artifactory.cern.ch/development' }
        } else {
            mavenCentral()
            jcenter()
            maven { url "https://dl.bintray.com/molr/molr-repo" }
        }
    }
}

dependencies {
    dependencies {
        compile group: 'io.molr', name: 'molr-mole-core', version: molrVersion
        compile group: 'io.molr', name: 'molr-commons', version: molrVersion

        /* to be able to run the server */
        compile group: 'io.molr', name: 'molr-mole-server', version: molrVersion

        /* Note: This has to be available at runtime, as the Mole needs it to run junit tests */
        compile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'

        compile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.3.1'

        compile group: 'org.springframework', name: 'spring-test', version: '5.0.10.RELEASE'

        /* This is needed for demo only */
        compile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.3.1'

        compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    }
}

javadoc { options.encoding = "UTF-8" }

if (!project.tasks.findByName("javadocJar")) {
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }
}

if (!project.tasks.findByName("sourcesJar")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination new File("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

if (project['DEPLOYMENT']) {
    println "Applying deployment scripts for ${project.name}"
    apply from: '../gradle/bintray-deploy.gradle'
}


task wrapper(type: Wrapper) { gradleVersion = '4.10.3' }
